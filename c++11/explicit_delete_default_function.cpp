/*
In traditional C++, if the programmer does not provide it, the compiler will default to generating
default constructors, copy constructs, assignment operators, and destructors for the object. Besides, C++
also defines operators such as new delete for all classes. This part of the function can be overridden
when the programmer needs it.

This raises some requirements: the ability to accurately control the generation of default functions
cannot be controlled. For example, when copying a class is prohibited, the copy constructor and the
assignment operator must be declared as private. Trying to use these undefined functions will result in
compilation or link errors, which is a very unconventional way.

Also, the default constructor generated by the compiler cannot exist at the same time as the userdefined constructor. If the user defines any constructor, the compiler will no longer generate the default
constructor, but sometimes we want to have both constructors at the same time, which is awkward.

C++11 provides a solution to the above requirements, allowing explicit declarations to take or reject
functions that come with the compiler.
*/
class Magic {
public:
    Magic() = default; // explicit let compiler use default constructor
    Magic& operator=(const Magic&) = delete; // explicit declare refuse constructor
    Magic(int magic_number);
};

int main(){
    Magic m();
    return 0;
}